/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.2
 * source: message_passing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class Problem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        latex: string;
        description: string;
        title: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.latex = data.latex;
            this.description = data.description;
            this.title = data.title;
        }
    }
    get latex() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set latex(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_latex() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get description() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get has_description() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get title() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get has_title() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        latex?: string;
        description?: string;
        title?: string;
    }): Problem {
        const message = new Problem({
            latex: data.latex,
            description: data.description,
            title: data.title
        });
        return message;
    }
    toObject() {
        const data: {
            latex?: string;
            description?: string;
            title?: string;
        } = {};
        if (this.latex != null) {
            data.latex = this.latex;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_latex && this.latex.length)
            writer.writeString(1, this.latex);
        if (this.has_description && this.description.length)
            writer.writeString(2, this.description);
        if (this.has_title && this.title.length)
            writer.writeString(3, this.title);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Problem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Problem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.latex = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                case 3:
                    message.title = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Problem {
        return Problem.deserialize(bytes);
    }
}
export class ServerSent extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
    constructor(data?: any[] | ({} & (({
        remove?: ServerSent.RemoveMember;
        add?: never;
        start?: never;
        new_problem?: never;
        end?: never;
        score_update?: never;
        wrong?: never;
    } | {
        remove?: never;
        add?: ServerSent.AddMember;
        start?: never;
        new_problem?: never;
        end?: never;
        score_update?: never;
        wrong?: never;
    } | {
        remove?: never;
        add?: never;
        start?: ServerSent.StartGame;
        new_problem?: never;
        end?: never;
        score_update?: never;
        wrong?: never;
    } | {
        remove?: never;
        add?: never;
        start?: never;
        new_problem?: ServerSent.NewProblem;
        end?: never;
        score_update?: never;
        wrong?: never;
    } | {
        remove?: never;
        add?: never;
        start?: never;
        new_problem?: never;
        end?: ServerSent.EndGame;
        score_update?: never;
        wrong?: never;
    } | {
        remove?: never;
        add?: never;
        start?: never;
        new_problem?: never;
        end?: never;
        score_update?: ServerSent.ScoreUpdate;
        wrong?: never;
    } | {
        remove?: never;
        add?: never;
        start?: never;
        new_problem?: never;
        end?: never;
        score_update?: never;
        wrong?: ServerSent.WrongAnswer;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remove" in data && data.remove != undefined) {
                this.remove = data.remove;
            }
            if ("add" in data && data.add != undefined) {
                this.add = data.add;
            }
            if ("start" in data && data.start != undefined) {
                this.start = data.start;
            }
            if ("new_problem" in data && data.new_problem != undefined) {
                this.new_problem = data.new_problem;
            }
            if ("end" in data && data.end != undefined) {
                this.end = data.end;
            }
            if ("score_update" in data && data.score_update != undefined) {
                this.score_update = data.score_update;
            }
            if ("wrong" in data && data.wrong != undefined) {
                this.wrong = data.wrong;
            }
        }
    }
    get remove() {
        return pb_1.Message.getWrapperField(this, ServerSent.RemoveMember, 1) as ServerSent.RemoveMember;
    }
    set remove(value: ServerSent.RemoveMember) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_remove() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get add() {
        return pb_1.Message.getWrapperField(this, ServerSent.AddMember, 2) as ServerSent.AddMember;
    }
    set add(value: ServerSent.AddMember) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_add() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get start() {
        return pb_1.Message.getWrapperField(this, ServerSent.StartGame, 3) as ServerSent.StartGame;
    }
    set start(value: ServerSent.StartGame) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_start() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get new_problem() {
        return pb_1.Message.getWrapperField(this, ServerSent.NewProblem, 4) as ServerSent.NewProblem;
    }
    set new_problem(value: ServerSent.NewProblem) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_new_problem() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get end() {
        return pb_1.Message.getWrapperField(this, ServerSent.EndGame, 5) as ServerSent.EndGame;
    }
    set end(value: ServerSent.EndGame) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_end() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get score_update() {
        return pb_1.Message.getWrapperField(this, ServerSent.ScoreUpdate, 6) as ServerSent.ScoreUpdate;
    }
    set score_update(value: ServerSent.ScoreUpdate) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_score_update() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get wrong() {
        return pb_1.Message.getWrapperField(this, ServerSent.WrongAnswer, 7) as ServerSent.WrongAnswer;
    }
    set wrong(value: ServerSent.WrongAnswer) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_wrong() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get message() {
        const cases: {
            [index: number]: "none" | "remove" | "add" | "start" | "new_problem" | "end" | "score_update" | "wrong";
        } = {
            0: "none",
            1: "remove",
            2: "add",
            3: "start",
            4: "new_problem",
            5: "end",
            6: "score_update",
            7: "wrong"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
    }
    static fromObject(data: {
        remove?: ReturnType<typeof ServerSent.RemoveMember.prototype.toObject>;
        add?: ReturnType<typeof ServerSent.AddMember.prototype.toObject>;
        start?: ReturnType<typeof ServerSent.StartGame.prototype.toObject>;
        new_problem?: ReturnType<typeof ServerSent.NewProblem.prototype.toObject>;
        end?: ReturnType<typeof ServerSent.EndGame.prototype.toObject>;
        score_update?: ReturnType<typeof ServerSent.ScoreUpdate.prototype.toObject>;
        wrong?: ReturnType<typeof ServerSent.WrongAnswer.prototype.toObject>;
    }): ServerSent {
        const message = new ServerSent({});
        if (data.remove != null) {
            message.remove = ServerSent.RemoveMember.fromObject(data.remove);
        }
        if (data.add != null) {
            message.add = ServerSent.AddMember.fromObject(data.add);
        }
        if (data.start != null) {
            message.start = ServerSent.StartGame.fromObject(data.start);
        }
        if (data.new_problem != null) {
            message.new_problem = ServerSent.NewProblem.fromObject(data.new_problem);
        }
        if (data.end != null) {
            message.end = ServerSent.EndGame.fromObject(data.end);
        }
        if (data.score_update != null) {
            message.score_update = ServerSent.ScoreUpdate.fromObject(data.score_update);
        }
        if (data.wrong != null) {
            message.wrong = ServerSent.WrongAnswer.fromObject(data.wrong);
        }
        return message;
    }
    toObject() {
        const data: {
            remove?: ReturnType<typeof ServerSent.RemoveMember.prototype.toObject>;
            add?: ReturnType<typeof ServerSent.AddMember.prototype.toObject>;
            start?: ReturnType<typeof ServerSent.StartGame.prototype.toObject>;
            new_problem?: ReturnType<typeof ServerSent.NewProblem.prototype.toObject>;
            end?: ReturnType<typeof ServerSent.EndGame.prototype.toObject>;
            score_update?: ReturnType<typeof ServerSent.ScoreUpdate.prototype.toObject>;
            wrong?: ReturnType<typeof ServerSent.WrongAnswer.prototype.toObject>;
        } = {};
        if (this.remove != null) {
            data.remove = this.remove.toObject();
        }
        if (this.add != null) {
            data.add = this.add.toObject();
        }
        if (this.start != null) {
            data.start = this.start.toObject();
        }
        if (this.new_problem != null) {
            data.new_problem = this.new_problem.toObject();
        }
        if (this.end != null) {
            data.end = this.end.toObject();
        }
        if (this.score_update != null) {
            data.score_update = this.score_update.toObject();
        }
        if (this.wrong != null) {
            data.wrong = this.wrong.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_remove)
            writer.writeMessage(1, this.remove, () => this.remove.serialize(writer));
        if (this.has_add)
            writer.writeMessage(2, this.add, () => this.add.serialize(writer));
        if (this.has_start)
            writer.writeMessage(3, this.start, () => this.start.serialize(writer));
        if (this.has_new_problem)
            writer.writeMessage(4, this.new_problem, () => this.new_problem.serialize(writer));
        if (this.has_end)
            writer.writeMessage(5, this.end, () => this.end.serialize(writer));
        if (this.has_score_update)
            writer.writeMessage(6, this.score_update, () => this.score_update.serialize(writer));
        if (this.has_wrong)
            writer.writeMessage(7, this.wrong, () => this.wrong.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerSent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerSent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.remove, () => message.remove = ServerSent.RemoveMember.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.add, () => message.add = ServerSent.AddMember.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.start, () => message.start = ServerSent.StartGame.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.new_problem, () => message.new_problem = ServerSent.NewProblem.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.end, () => message.end = ServerSent.EndGame.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.score_update, () => message.score_update = ServerSent.ScoreUpdate.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.wrong, () => message.wrong = ServerSent.WrongAnswer.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerSent {
        return ServerSent.deserialize(bytes);
    }
}
export namespace ServerSent {
    export class RemoveMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.name = data.name;
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            name?: string;
        }): RemoveMember {
            const message = new RemoveMember({
                name: data.name
            });
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveMember {
            return RemoveMember.deserialize(bytes);
        }
    }
    export class AddMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.name = data.name;
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            name?: string;
        }): AddMember {
            const message = new AddMember({
                name: data.name
            });
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddMember {
            return AddMember.deserialize(bytes);
        }
    }
    export class StartGame extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            startTime: dependency_1.google.protobuf.Timestamp;
            duration: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.startTime = data.startTime;
                this.duration = data.duration;
            }
        }
        get startTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set startTime(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_startTime() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get duration() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set duration(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            startTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            duration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): StartGame {
            const message = new StartGame({
                startTime: dependency_1.google.protobuf.Timestamp.fromObject(data.startTime),
                duration: dependency_1.google.protobuf.Timestamp.fromObject(data.duration)
            });
            return message;
        }
        toObject() {
            const data: {
                startTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                duration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.startTime != null) {
                data.startTime = this.startTime.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_startTime)
                writer.writeMessage(1, this.startTime, () => this.startTime.serialize(writer));
            if (this.has_duration)
                writer.writeMessage(2, this.duration, () => this.duration.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartGame {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartGame();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.startTime, () => message.startTime = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.duration, () => message.duration = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartGame {
            return StartGame.deserialize(bytes);
        }
    }
    export class EndGame extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EndGame {
            const message = new EndGame({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndGame {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndGame();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndGame {
            return EndGame.deserialize(bytes);
        }
    }
    export class NewProblem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            problem: Problem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.problem = data.problem;
            }
        }
        get problem() {
            return pb_1.Message.getWrapperField(this, Problem, 1) as Problem;
        }
        set problem(value: Problem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_problem() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            problem?: ReturnType<typeof Problem.prototype.toObject>;
        }): NewProblem {
            const message = new NewProblem({
                problem: Problem.fromObject(data.problem)
            });
            return message;
        }
        toObject() {
            const data: {
                problem?: ReturnType<typeof Problem.prototype.toObject>;
            } = {};
            if (this.problem != null) {
                data.problem = this.problem.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_problem)
                writer.writeMessage(1, this.problem, () => this.problem.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewProblem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewProblem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.problem, () => message.problem = Problem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewProblem {
            return NewProblem.deserialize(bytes);
        }
    }
    export class ScoreUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name: string;
            score: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.name = data.name;
                this.score = data.score;
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get score() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_score() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            score?: number;
        }): ScoreUpdate {
            const message = new ScoreUpdate({
                name: data.name,
                score: data.score
            });
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                score?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name && this.name.length)
                writer.writeString(1, this.name);
            if (this.has_score)
                writer.writeInt32(2, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoreUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoreUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScoreUpdate {
            return ScoreUpdate.deserialize(bytes);
        }
    }
    export class WrongAnswer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): WrongAnswer {
            const message = new WrongAnswer({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WrongAnswer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WrongAnswer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WrongAnswer {
            return WrongAnswer.deserialize(bytes);
        }
    }
}
export class ClientSent extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        request_start?: ClientSent.RequestStart;
        answer?: never;
        request_problem?: never;
    } | {
        request_start?: never;
        answer?: ClientSent.GiveAnswer;
        request_problem?: never;
    } | {
        request_start?: never;
        answer?: never;
        request_problem?: ClientSent.RequestProblem;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request_start" in data && data.request_start != undefined) {
                this.request_start = data.request_start;
            }
            if ("answer" in data && data.answer != undefined) {
                this.answer = data.answer;
            }
            if ("request_problem" in data && data.request_problem != undefined) {
                this.request_problem = data.request_problem;
            }
        }
    }
    get request_start() {
        return pb_1.Message.getWrapperField(this, ClientSent.RequestStart, 1) as ClientSent.RequestStart;
    }
    set request_start(value: ClientSent.RequestStart) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_request_start() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get answer() {
        return pb_1.Message.getWrapperField(this, ClientSent.GiveAnswer, 2) as ClientSent.GiveAnswer;
    }
    set answer(value: ClientSent.GiveAnswer) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_answer() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get request_problem() {
        return pb_1.Message.getWrapperField(this, ClientSent.RequestProblem, 3) as ClientSent.RequestProblem;
    }
    set request_problem(value: ClientSent.RequestProblem) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_request_problem() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get message() {
        const cases: {
            [index: number]: "none" | "request_start" | "answer" | "request_problem";
        } = {
            0: "none",
            1: "request_start",
            2: "answer",
            3: "request_problem"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        request_start?: ReturnType<typeof ClientSent.RequestStart.prototype.toObject>;
        answer?: ReturnType<typeof ClientSent.GiveAnswer.prototype.toObject>;
        request_problem?: ReturnType<typeof ClientSent.RequestProblem.prototype.toObject>;
    }): ClientSent {
        const message = new ClientSent({});
        if (data.request_start != null) {
            message.request_start = ClientSent.RequestStart.fromObject(data.request_start);
        }
        if (data.answer != null) {
            message.answer = ClientSent.GiveAnswer.fromObject(data.answer);
        }
        if (data.request_problem != null) {
            message.request_problem = ClientSent.RequestProblem.fromObject(data.request_problem);
        }
        return message;
    }
    toObject() {
        const data: {
            request_start?: ReturnType<typeof ClientSent.RequestStart.prototype.toObject>;
            answer?: ReturnType<typeof ClientSent.GiveAnswer.prototype.toObject>;
            request_problem?: ReturnType<typeof ClientSent.RequestProblem.prototype.toObject>;
        } = {};
        if (this.request_start != null) {
            data.request_start = this.request_start.toObject();
        }
        if (this.answer != null) {
            data.answer = this.answer.toObject();
        }
        if (this.request_problem != null) {
            data.request_problem = this.request_problem.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_request_start)
            writer.writeMessage(1, this.request_start, () => this.request_start.serialize(writer));
        if (this.has_answer)
            writer.writeMessage(2, this.answer, () => this.answer.serialize(writer));
        if (this.has_request_problem)
            writer.writeMessage(3, this.request_problem, () => this.request_problem.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientSent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientSent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request_start, () => message.request_start = ClientSent.RequestStart.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.answer, () => message.answer = ClientSent.GiveAnswer.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.request_problem, () => message.request_problem = ClientSent.RequestProblem.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientSent {
        return ClientSent.deserialize(bytes);
    }
}
export namespace ClientSent {
    export class RequestStart extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            duration: dependency_1.google.protobuf.Timestamp;
            is_random: boolean;
            problems: Problem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.duration = data.duration;
                this.is_random = data.is_random;
                this.problems = data.problems;
            }
        }
        get duration() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set duration(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get is_random() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_random(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_is_random() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get problems() {
            return pb_1.Message.getRepeatedWrapperField(this, Problem, 3) as Problem[];
        }
        set problems(value: Problem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            duration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            is_random?: boolean;
            problems?: ReturnType<typeof Problem.prototype.toObject>[];
        }): RequestStart {
            const message = new RequestStart({
                duration: dependency_1.google.protobuf.Timestamp.fromObject(data.duration),
                is_random: data.is_random,
                problems: data.problems.map(item => Problem.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                duration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                is_random?: boolean;
                problems?: ReturnType<typeof Problem.prototype.toObject>[];
            } = {};
            if (this.duration != null) {
                data.duration = this.duration.toObject();
            }
            if (this.is_random != null) {
                data.is_random = this.is_random;
            }
            if (this.problems != null) {
                data.problems = this.problems.map((item: Problem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_duration)
                writer.writeMessage(1, this.duration, () => this.duration.serialize(writer));
            if (this.has_is_random)
                writer.writeBool(2, this.is_random);
            if (this.problems.length)
                writer.writeRepeatedMessage(3, this.problems, (item: Problem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestStart {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestStart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.duration, () => message.duration = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.is_random = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.problems, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Problem.deserialize(reader), Problem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestStart {
            return RequestStart.deserialize(bytes);
        }
    }
    export class GiveAnswer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            answer: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.answer = data.answer;
            }
        }
        get answer() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set answer(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_answer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            answer?: string;
        }): GiveAnswer {
            const message = new GiveAnswer({
                answer: data.answer
            });
            return message;
        }
        toObject() {
            const data: {
                answer?: string;
            } = {};
            if (this.answer != null) {
                data.answer = this.answer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_answer && this.answer.length)
                writer.writeString(1, this.answer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiveAnswer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GiveAnswer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.answer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GiveAnswer {
            return GiveAnswer.deserialize(bytes);
        }
    }
    export class RequestProblem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RequestProblem {
            const message = new RequestProblem({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestProblem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestProblem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestProblem {
            return RequestProblem.deserialize(bytes);
        }
    }
}
export class CreateLobbyReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        lobby_name: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.lobby_name = data.lobby_name;
        }
    }
    get lobby_name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set lobby_name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_lobby_name() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        lobby_name?: string;
    }): CreateLobbyReq {
        const message = new CreateLobbyReq({
            lobby_name: data.lobby_name
        });
        return message;
    }
    toObject() {
        const data: {
            lobby_name?: string;
        } = {};
        if (this.lobby_name != null) {
            data.lobby_name = this.lobby_name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_lobby_name && this.lobby_name.length)
            writer.writeString(1, this.lobby_name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLobbyReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLobbyReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.lobby_name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateLobbyReq {
        return CreateLobbyReq.deserialize(bytes);
    }
}
export class CreateLobbyRes extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        lobby_id: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.lobby_id = data.lobby_id;
        }
    }
    get lobby_id() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set lobby_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_lobby_id() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        lobby_id?: string;
    }): CreateLobbyRes {
        const message = new CreateLobbyRes({
            lobby_id: data.lobby_id
        });
        return message;
    }
    toObject() {
        const data: {
            lobby_id?: string;
        } = {};
        if (this.lobby_id != null) {
            data.lobby_id = this.lobby_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_lobby_id && this.lobby_id.length)
            writer.writeString(1, this.lobby_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLobbyRes {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLobbyRes();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.lobby_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateLobbyRes {
        return CreateLobbyRes.deserialize(bytes);
    }
}
export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username: string;
        password?: string;
        lobby_id: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.username = data.username;
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            this.lobby_id = data.lobby_id;
        }
    }
    get username() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_username() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get has_password() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get lobby_id() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set lobby_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get has_lobby_id() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        username?: string;
        password?: string;
        lobby_id?: string;
    }): LoginRequest {
        const message = new LoginRequest({
            username: data.username,
            lobby_id: data.lobby_id
        });
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
            lobby_id?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.lobby_id != null) {
            data.lobby_id = this.lobby_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_username && this.username.length)
            writer.writeString(1, this.username);
        if (this.has_password && this.password.length)
            writer.writeString(2, this.password);
        if (this.has_lobby_id && this.lobby_id.length)
            writer.writeString(3, this.lobby_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.lobby_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
        return LoginRequest.deserialize(bytes);
    }
}
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        otp: string;
        is_owner: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.otp = data.otp;
            this.is_owner = data.is_owner;
        }
    }
    get otp() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set otp(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_otp() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get is_owner() {
        return pb_1.Message.getField(this, 2) as boolean;
    }
    set is_owner(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get has_is_owner() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        otp?: string;
        is_owner?: boolean;
    }): LoginResponse {
        const message = new LoginResponse({
            otp: data.otp,
            is_owner: data.is_owner
        });
        return message;
    }
    toObject() {
        const data: {
            otp?: string;
            is_owner?: boolean;
        } = {};
        if (this.otp != null) {
            data.otp = this.otp;
        }
        if (this.is_owner != null) {
            data.is_owner = this.is_owner;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_otp && this.otp.length)
            writer.writeString(1, this.otp);
        if (this.has_is_owner)
            writer.writeBool(2, this.is_owner);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.otp = reader.readString();
                    break;
                case 2:
                    message.is_owner = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
